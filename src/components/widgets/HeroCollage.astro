---
import SectionLayout from '~/layouts/SectionLayout.astro';

import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import { twMerge } from 'tailwind-merge';

import type { HeroCollage as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  images = await Astro.slots.render('images'),

  classes = {},
  isReversed = false,
} = Astro.props;

const { container: containerClass = '' } = classes;

const firstColumn = Array.isArray(images) && images.filter((_, index) => index % 2 === 0);
const secondColumn = Array.isArray(images) && images.filter((_, index) => index % 2 === 1);
---

<SectionLayout
  classes={{
    container: twMerge(containerClass, 'py-0 md:py-0'),
  }}
>
  <div class={twMerge('flex flex-col md:flex-row gap-12 md:gap-20', isReversed ? 'md:flex-row-reverse' : '')}>
    <div class="basis-1/2 flex flex-col justify-center">
      <div class="flex flex-col gap-3 md:gap-6">
        {tagline && <p class="text-base uppercase" set:html={tagline} />}
        {title && <h1 set:html={title} />}
        <div class="">
          {subtitle && <p class="text-lg" set:html={subtitle} />}
        </div>
        {
          Array.isArray(actions) ? (
            actions.map((action) => (
              <div class="flex mt-10 md:mt-4 md:mb-0">
                <Button {...(action || {})} class="text-base" />
              </div>
            ))
          ) : (
            <Fragment set:html={actions} />
          )
        }
        {content && <Fragment set:html={content} />}
      </div>
    </div>
    <div class="basis-1/2">
      <div class="grid grid-cols-2 gap-4">
        <div class="grid gap-4">
          {
            Array.isArray(firstColumn) &&
              firstColumn.map((image) => (
                <div>
                  <Image
                    class={twMerge('w-full')}
                    widths={[400, 768, 1024, 2040]}
                    sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                    loading="eager"
                    width={600}
                    height={600}
                    {...image}
                  />
                </div>
              ))
          }
        </div>
        <div class="grid gap-4">
          {
            Array.isArray(secondColumn) &&
              secondColumn.map((image) => (
                <Image
                  class={twMerge('w-full')}
                  widths={[400, 768, 1024, 2040]}
                  sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                  loading="eager"
                  width={600}
                  height={600}
                  {...image}
                />
              ))
          }
        </div>
      </div>
    </div>
  </div>
</SectionLayout>

<!-- <section class={twMerge('relative md:-mt-[76px] not-prose', containerClass)} {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    
  </div>
</section> -->
